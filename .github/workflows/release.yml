name: Build Release Binaries

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }} Binary
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          # x86_64 builds
          - os: ubuntu-20.04
            arch: x86_64
            asset_name: video-analyzer-x86_64
            asset_content_type: application/x-executable
            qemu_arch: x86_64
          # ARM64 builds
          - os: ubuntu-20.04
            arch: aarch64
            asset_name: video-analyzer-aarch64
            asset_content_type: application/x-executable
            qemu_arch: aarch64
          # ARM32 builds
          - os: ubuntu-20.04
            arch: armv7l
            asset_name: video-analyzer-armv7l
            asset_content_type: application/x-executable
            qemu_arch: arm
          # Windows build
          - os: windows-latest
            arch: x86_64
            asset_name: video-analyzer.exe
            asset_content_type: application/x-msdownload
          # macOS build
          - os: macos-latest
            arch: x86_64
            asset_name: video-analyzer-macos
            asset_content_type: application/x-executable

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-20.04' && matrix.arch != 'x86_64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/${{ matrix.qemu_arch }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Create Version Info
        if: matrix.os == 'windows-latest'
        run: |
          echo "VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=(1, 0, 0, 0),
              prodvers=(1, 0, 0, 0),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo([
                StringTable(
                  u'040904B0',
                  [StringStruct(u'CompanyName', u'Open Source Video Tools'),
                   StringStruct(u'FileDescription', u'Video Analyzer - Open Source Video Management Tool'),
                   StringStruct(u'FileVersion', u'1.0.0'),
                   StringStruct(u'InternalName', u'video_analyzer'),
                   StringStruct(u'LegalCopyright', u'MIT License - https://opensource.org/licenses/MIT'),
                   StringStruct(u'OriginalFilename', u'video-analyzer.exe'),
                   StringStruct(u'ProductName', u'Video Analyzer'),
                   StringStruct(u'ProductVersion', u'1.0.0'),
                   StringStruct(u'Comments', u'https://github.com/yourusername/video_analyzer')])
              ]),
              VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
            ]
          )" > version_info.txt

      - name: Create build info
        shell: bash
        run: |
          echo "Build Date: $(date -u)" > build_info.txt
          echo "Commit: ${{ github.sha }}" >> build_info.txt
          echo "Source: https://github.com/${{ github.repository }}" >> build_info.txt
          echo "License: MIT" >> build_info.txt
          echo "This is an open source tool for video management." >> build_info.txt

      - name: Create Windows Manifest
        if: matrix.os == 'windows-latest'
        run: |
          echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
            <assemblyIdentity version="1.0.0.0" processorArchitecture="*" name="VideoAnalyzer" type="win32"/>
            <description>Video Analyzer Tool</description>
            <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
              <security>
                <requestedPrivileges>
                  <requestedExecutionLevel level="asInvoker" uiAccess="false"/>
                </requestedPrivileges>
              </security>
            </trustInfo>
            <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
              <application>
                <supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"/>
                <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>
                <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"/>
                <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"/>
                <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
              </application>
            </compatibility>
          </assembly>' > video_analyzer.manifest

      - name: Setup Linux build environment
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf gcc-multilib
          if [ "${{ matrix.arch }}" != "x86_64" ]; then
            # Install cross-compilation tools for ARM
            sudo apt-get install -y crossbuild-essential-arm64 crossbuild-essential-armhf
          fi

      - name: Build binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            python -m PyInstaller --clean --onefile \
              --name=${{ matrix.asset_name }} \
              --add-data="README.md:." \
              --add-data="build_info.txt:." \
              --version-file=version_info.txt \
              --manifest=video_analyzer.manifest \
              --add-binary="LICENSE;." \
              --hiddenimport=pkg_resources \
              --hiddenimport=packaging \
              --hiddenimport=packaging.version \
              --hiddenimport=packaging.specifiers \
              --hiddenimport=packaging.requirements \
              --key=VideoAnalyzer \
              video_analyzer/__main__.py
          elif [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
            # Set environment variables for maximum compatibility
            export PYTHONNOUSERSITE=1
            export PYTHONPATH=/usr/lib/python3.8
            export GLIBC_TUNABLES=glibc.pthread.rseq=0
            
            # Set architecture-specific flags
            if [ "${{ matrix.arch }}" = "aarch64" ]; then
              export ARCH_FLAGS="--target-arch aarch64"
            elif [ "${{ matrix.arch }}" = "armv7l" ]; then
              export ARCH_FLAGS="--target-arch arm"
            else
              export ARCH_FLAGS="--target-arch x86_64"
            fi
            
            # Build with specific flags for broader compatibility
            python -m PyInstaller --clean --onefile \
              --name=${{ matrix.asset_name }} \
              --add-data="README.md:." \
              --add-data="build_info.txt:." \
              --runtime-tmpdir /tmp \
              $ARCH_FLAGS \
              --strip \
              --linux-bootloader-ignore-signals \
              --exclude-module _bootlocale \
              --exclude-module grp \
              --exclude-module pwd \
              --exclude-module termios \
              video_analyzer/__main__.py

            # Patch the binary for better compatibility
            patchelf --set-rpath '$ORIGIN/lib' dist/${{ matrix.asset_name }}
            if [ -f "dist/${{ matrix.asset_name }}" ]; then
              # Set older GLIBC version requirements
              patchelf --replace-needed libpython3.8.so.1.0 libpython3.8.so dist/${{ matrix.asset_name }}
              patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 dist/${{ matrix.asset_name }} || true
            fi
          else
            python -m PyInstaller --clean --onefile \
              --name=${{ matrix.asset_name }} \
              --add-data="README.md:." \
              --add-data="build_info.txt:." \
              video_analyzer/__main__.py
          fi
        shell: bash

      - name: Generate SHA256
        run: |
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi
        shell: bash

      - name: Sign Linux Binary
        if: matrix.os == 'ubuntu-20.04'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --detach-sign dist/${{ matrix.asset_name }}

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}

      - name: Upload SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/${{ matrix.asset_name }}.sha256
          asset_name: ${{ matrix.asset_name }}.sha256
          asset_content_type: text/plain

      - name: Upload Linux Signature
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/${{ matrix.asset_name }}.sig
          asset_name: ${{ matrix.asset_name }}.sig
          asset_content_type: application/octet-stream 